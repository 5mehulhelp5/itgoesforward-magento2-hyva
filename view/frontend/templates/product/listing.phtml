<?php

/** @var \Magento\Catalog\Block\Product\View $block */
/** @var \Magento\Framework\Escaper $escaper */

/** @var \Magento\Catalog\Model\Product $product */
$product = $block->getProduct();
?>

<div x-data="listingsApiComponent()"
     @configurable-selection-changed.window="checkIGFProducts($event.detail)"
     @attributes-loaded.window="fetchListings($event.detail)">
    <template x-if="!loading && selectedListing">
        <div class="mb-3">
            <p class="text-sm mb-2">
                <strong>
                    <?= __('Forward available   â€” an unworn product from another customer who wants to send it to you instead of returning it.') ?>
                </strong>
                <i class="block mt-2">
                    <?= __('The shipping label is anonymous to protect privacy, and by skipping the warehouse, you\'re reducing waste and CO2 emissions. Delivery may take a bit longer, but itâ€™s a sustainable choice!'); ?>
                </i>
            </p>
            <button type="submit"
                    title="<?= $escaper->escapeHtml(__('Add Forward to Cart')) ?>"
                    class="w-full btn hover:bg-[#0fbc49] bg-[#0fbc49] px-3 py-2 text-base flex justify-center text-white"
                    @click="addToCart();">
                <span class="uppercase text-md font-bold flex items-center gap-4">
                    <img src="<?= $block->getViewFileUrl('Alpaca_ItGoesForward::images/sustainability.png'); ?>"
                         width="24"
                         height="24"
                    />
                    <?= $escaper->escapeHtml(__('Add Forward to Cart')) ?>
                </span>
            </button>
        </div>
    </template>
</div>

<script>
    function listingsApiComponent() {
        return {
            loading: false,
            selectedListing: false,
            listings: [],
            attributeData: null,
            checkIGFProducts(data) {
                this.selectedListing = false;

                this.$nextTick(() => {
                    this.setItGoesForwardLabel();
                });

                if (!data?.productIndex) {
                    return;
                }

                const listing = this.listings.find(listing => listing.productId === data.productIndex);

                if (listing) {
                    this.selectedListing = listing.id;
                }
            },
            getAvailableProductIds(data) {
                let productIds = [];

                data.attributeOptions.forEach((item, index) => {
                    if (!Array.isArray(item)) return;

                    item.forEach(subItem => {
                        if (!subItem.products) return;

                        subItem.products.forEach(productId => {
                            if (productIds.includes(productId)) return;

                            productIds.push(productId);
                        });
                    });
                });

                return productIds;
            },
            fetchListings(attributeData) {
                this.loading = true;
                this.attributeData = attributeData;
                const productIds = this.getAvailableProductIds(attributeData);
                const productIdsString = productIds.join(',');

                // Fetch listings for all product ids
                const apiUrl = '<?= $block->getUrl('rest/V1/itgoesforward/listings/product/') ?>' + productIdsString;

                fetch(apiUrl, {
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        this.listings = data;
                        this.setItGoesForwardLabel();
                    })
                    .catch(error => {
                        console.error('There was a problem with the fetch operation:', error);
                    })
                    .finally(() => {
                        this.loading = false;
                    });
            },
            setItGoesForwardLabel() {
                this.attributeData?.attributeOptions.forEach((item, index) => {
                    if (!Array.isArray(item)) return;

                    item.forEach(subItem => {
                        if (!subItem.products) return;

                        subItem.products.forEach(productId => {
                            if (this.listings.some(listing => listing.productId === productId)) {
                                const selectElement = document.getElementById('attribute' + index);
                                const optionElement = selectElement.querySelector('option[value="' + subItem.id + '"]');

                                if (!optionElement.textContent.includes('ðŸŒ±')) {
                                    optionElement.textContent = optionElement.textContent + '  ðŸŒ±';
                                }
                            }
                        });
                    });
                });
            },
            addToCart() {
                const productFormElement = document.getElementById('product_addtocart_form');
                const itGoesForwardInput = document.createElement('input');
                const addToCartButtonElement = document.getElementById('product-addtocart-button');
                itGoesForwardInput.type = 'hidden';
                itGoesForwardInput.name = 'it_goes_forward';
                itGoesForwardInput.value = this.selectedListing;
                productFormElement.appendChild(itGoesForwardInput);
                addToCartButtonElement.click();

                // Remove the input after the form is submitted
                productFormElement.removeChild(itGoesForwardInput);
            }
        }
    }
</script>
